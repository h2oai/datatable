//------------------------------------------------------------------------------
// Copyright 2018-2021 H2O.ai
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
//------------------------------------------------------------------------------
// In order to compile:
//     $ flatc --cpp jay.fbs
//
// then review the generated file and fix inadvertent changes
//------------------------------------------------------------------------------
namespace jay;



//------------------------------------------------------------------------------
// Types
//------------------------------------------------------------------------------

enum SType : uint8 {
  Bool8,
  Int8,
  Int16,
  Int32,
  Int64,
  Float32,
  Float64,
  Str32,
  Str64,
  Date32,
  Time64,
  Void0,
  Arr32,
  Arr64,
}

union TypeExtra {
  child : Type
}

table Type {
  stype: SType;
  extra: TypeExtra;
}


union Stats {
  Bool    : StatsBool,
  Int8    : StatsInt8,
  Int16   : StatsInt16,
  Int32   : StatsInt32,
  Int64   : StatsInt64,
  Float32 : StatsFloat32,
  Float64 : StatsFloat64,
}

struct StatsBool    { min: int8;    max: int8;    }
struct StatsInt8    { min: int8;    max: int8;    }
struct StatsInt16   { min: int16;   max: int16;   }
struct StatsInt32   { min: int32;   max: int32;   }
struct StatsInt64   { min: int64;   max: int64;   }
struct StatsFloat32 { min: float32; max: float32; }
struct StatsFloat64 { min: float64; max: float64; }



//------------------------------------------------------------------------------
// Main
//------------------------------------------------------------------------------

table Frame {
  nrows:   uint64;
  ncols:   uint64;
  nkeys:   int;
  columns: [Column];
}

table Column {
  stype:     SType;   // deprecated -- use `type` instead
  data:      Buffer;  // deprecated -- use `buffers` instead
  strdata:   Buffer;  // deprecated -- use `buffers` instead

  name:      string;
  nullcount: uint64;
  stats:     Stats;
  type:      Type;
  nrows:     uint64;
  buffers:   [Buffer];
  children:  [Column];
}

struct Buffer {
  offset: uint64;
  length: uint64;
}

root_type Frame;
