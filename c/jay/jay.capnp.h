// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: jay.capnp

#ifndef CAPNP_INCLUDED_9bf7c057bfbac576_
#define CAPNP_INCLUDED_9bf7c057bfbac576_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 6001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(cad7df991f5731d7);
CAPNP_DECLARE_SCHEMA(bcafaabda033c3e0);
CAPNP_DECLARE_SCHEMA(a998c0635454913c);
CAPNP_DECLARE_SCHEMA(95688c07e4348d12);
CAPNP_DECLARE_SCHEMA(a5271bdde8cd4eaf);
CAPNP_DECLARE_SCHEMA(cb615fe9ef8f8631);
CAPNP_DECLARE_SCHEMA(d1b9fb0da945551d);
CAPNP_DECLARE_SCHEMA(d9e2afd78b6e8e23);
CAPNP_DECLARE_SCHEMA(c923a6a898646364);
CAPNP_DECLARE_SCHEMA(a83f98a0e22dd3e3);
CAPNP_DECLARE_SCHEMA(e27122b60dbe2c81);
CAPNP_DECLARE_SCHEMA(d41ca202943f4ac2);
CAPNP_DECLARE_SCHEMA(e1bb4a93d544a7c5);

}  // namespace schemas
}  // namespace capnp

namespace jay {

struct Frame {
  Frame() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cad7df991f5731d7, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Column {
  Column() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Type;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bcafaabda033c3e0, 4, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Column::Type {
  Type() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    MU,
    BOOL8,
    INT8,
    INT16,
    INT32,
    INT64,
    FLOAT32,
    FLOAT64,
    STR32,
    STR64,
  };
  struct Bool8;
  struct Int8;
  struct Int16;
  struct Int32;
  struct Int64;
  struct Float32;
  struct Float64;
  struct Str32;
  struct Str64;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a998c0635454913c, 4, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Column::Type::Bool8 {
  Bool8() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(95688c07e4348d12, 4, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Column::Type::Int8 {
  Int8() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a5271bdde8cd4eaf, 4, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Column::Type::Int16 {
  Int16() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cb615fe9ef8f8631, 4, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Column::Type::Int32 {
  Int32() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d1b9fb0da945551d, 4, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Column::Type::Int64 {
  Int64() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d9e2afd78b6e8e23, 4, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Column::Type::Float32 {
  Float32() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c923a6a898646364, 4, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Column::Type::Float64 {
  Float64() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a83f98a0e22dd3e3, 4, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Column::Type::Str32 {
  Str32() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e27122b60dbe2c81, 4, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Column::Type::Str64 {
  Str64() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d41ca202943f4ac2, 4, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Buffer {
  Buffer() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e1bb4a93d544a7c5, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class Frame::Reader {
public:
  typedef Frame Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int64_t getNrows() const;

  inline  ::int64_t getNcols() const;

  inline bool hasColumns() const;
  inline  ::capnp::List< ::jay::Column>::Reader getColumns() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Frame::Builder {
public:
  typedef Frame Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int64_t getNrows();
  inline void setNrows( ::int64_t value);

  inline  ::int64_t getNcols();
  inline void setNcols( ::int64_t value);

  inline bool hasColumns();
  inline  ::capnp::List< ::jay::Column>::Builder getColumns();
  inline void setColumns( ::capnp::List< ::jay::Column>::Reader value);
  inline  ::capnp::List< ::jay::Column>::Builder initColumns(unsigned int size);
  inline void adoptColumns(::capnp::Orphan< ::capnp::List< ::jay::Column>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::jay::Column>> disownColumns();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Frame::Pipeline {
public:
  typedef Frame Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Column::Reader {
public:
  typedef Column Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline  ::uint64_t getNullcount() const;

  inline bool hasDescription() const;
  inline  ::capnp::Text::Reader getDescription() const;

  inline typename Type::Reader getType() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Column::Builder {
public:
  typedef Column Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline  ::uint64_t getNullcount();
  inline void setNullcount( ::uint64_t value);

  inline bool hasDescription();
  inline  ::capnp::Text::Builder getDescription();
  inline void setDescription( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDescription(unsigned int size);
  inline void adoptDescription(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDescription();

  inline typename Type::Builder getType();
  inline typename Type::Builder initType();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Column::Pipeline {
public:
  typedef Column Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename Type::Pipeline getType();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Column::Type::Reader {
public:
  typedef Type Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isMu() const;
  inline  ::capnp::Void getMu() const;

  inline bool isBool8() const;
  inline typename Bool8::Reader getBool8() const;

  inline bool isInt8() const;
  inline typename Int8::Reader getInt8() const;

  inline bool isInt16() const;
  inline typename Int16::Reader getInt16() const;

  inline bool isInt32() const;
  inline typename Int32::Reader getInt32() const;

  inline bool isInt64() const;
  inline typename Int64::Reader getInt64() const;

  inline bool isFloat32() const;
  inline typename Float32::Reader getFloat32() const;

  inline bool isFloat64() const;
  inline typename Float64::Reader getFloat64() const;

  inline bool isStr32() const;
  inline typename Str32::Reader getStr32() const;

  inline bool isStr64() const;
  inline typename Str64::Reader getStr64() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Column::Type::Builder {
public:
  typedef Type Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isMu();
  inline  ::capnp::Void getMu();
  inline void setMu( ::capnp::Void value = ::capnp::VOID);

  inline bool isBool8();
  inline typename Bool8::Builder getBool8();
  inline typename Bool8::Builder initBool8();

  inline bool isInt8();
  inline typename Int8::Builder getInt8();
  inline typename Int8::Builder initInt8();

  inline bool isInt16();
  inline typename Int16::Builder getInt16();
  inline typename Int16::Builder initInt16();

  inline bool isInt32();
  inline typename Int32::Builder getInt32();
  inline typename Int32::Builder initInt32();

  inline bool isInt64();
  inline typename Int64::Builder getInt64();
  inline typename Int64::Builder initInt64();

  inline bool isFloat32();
  inline typename Float32::Builder getFloat32();
  inline typename Float32::Builder initFloat32();

  inline bool isFloat64();
  inline typename Float64::Builder getFloat64();
  inline typename Float64::Builder initFloat64();

  inline bool isStr32();
  inline typename Str32::Builder getStr32();
  inline typename Str32::Builder initStr32();

  inline bool isStr64();
  inline typename Str64::Builder getStr64();
  inline typename Str64::Builder initStr64();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Column::Type::Pipeline {
public:
  typedef Type Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Column::Type::Bool8::Reader {
public:
  typedef Bool8 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasData() const;
  inline  ::jay::Buffer::Reader getData() const;

  inline  ::int8_t getMin() const;

  inline  ::int8_t getMax() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Column::Type::Bool8::Builder {
public:
  typedef Bool8 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasData();
  inline  ::jay::Buffer::Builder getData();
  inline void setData( ::jay::Buffer::Reader value);
  inline  ::jay::Buffer::Builder initData();
  inline void adoptData(::capnp::Orphan< ::jay::Buffer>&& value);
  inline ::capnp::Orphan< ::jay::Buffer> disownData();

  inline  ::int8_t getMin();
  inline void setMin( ::int8_t value);

  inline  ::int8_t getMax();
  inline void setMax( ::int8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Column::Type::Bool8::Pipeline {
public:
  typedef Bool8 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::jay::Buffer::Pipeline getData();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Column::Type::Int8::Reader {
public:
  typedef Int8 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasData() const;
  inline  ::jay::Buffer::Reader getData() const;

  inline  ::int8_t getMin() const;

  inline  ::int8_t getMax() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Column::Type::Int8::Builder {
public:
  typedef Int8 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasData();
  inline  ::jay::Buffer::Builder getData();
  inline void setData( ::jay::Buffer::Reader value);
  inline  ::jay::Buffer::Builder initData();
  inline void adoptData(::capnp::Orphan< ::jay::Buffer>&& value);
  inline ::capnp::Orphan< ::jay::Buffer> disownData();

  inline  ::int8_t getMin();
  inline void setMin( ::int8_t value);

  inline  ::int8_t getMax();
  inline void setMax( ::int8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Column::Type::Int8::Pipeline {
public:
  typedef Int8 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::jay::Buffer::Pipeline getData();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Column::Type::Int16::Reader {
public:
  typedef Int16 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasData() const;
  inline  ::jay::Buffer::Reader getData() const;

  inline  ::int16_t getMin() const;

  inline  ::int16_t getMax() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Column::Type::Int16::Builder {
public:
  typedef Int16 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasData();
  inline  ::jay::Buffer::Builder getData();
  inline void setData( ::jay::Buffer::Reader value);
  inline  ::jay::Buffer::Builder initData();
  inline void adoptData(::capnp::Orphan< ::jay::Buffer>&& value);
  inline ::capnp::Orphan< ::jay::Buffer> disownData();

  inline  ::int16_t getMin();
  inline void setMin( ::int16_t value);

  inline  ::int16_t getMax();
  inline void setMax( ::int16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Column::Type::Int16::Pipeline {
public:
  typedef Int16 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::jay::Buffer::Pipeline getData();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Column::Type::Int32::Reader {
public:
  typedef Int32 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasData() const;
  inline  ::jay::Buffer::Reader getData() const;

  inline  ::int32_t getMin() const;

  inline  ::int32_t getMax() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Column::Type::Int32::Builder {
public:
  typedef Int32 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasData();
  inline  ::jay::Buffer::Builder getData();
  inline void setData( ::jay::Buffer::Reader value);
  inline  ::jay::Buffer::Builder initData();
  inline void adoptData(::capnp::Orphan< ::jay::Buffer>&& value);
  inline ::capnp::Orphan< ::jay::Buffer> disownData();

  inline  ::int32_t getMin();
  inline void setMin( ::int32_t value);

  inline  ::int32_t getMax();
  inline void setMax( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Column::Type::Int32::Pipeline {
public:
  typedef Int32 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::jay::Buffer::Pipeline getData();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Column::Type::Int64::Reader {
public:
  typedef Int64 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasData() const;
  inline  ::jay::Buffer::Reader getData() const;

  inline  ::int64_t getMin() const;

  inline  ::int64_t getMax() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Column::Type::Int64::Builder {
public:
  typedef Int64 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasData();
  inline  ::jay::Buffer::Builder getData();
  inline void setData( ::jay::Buffer::Reader value);
  inline  ::jay::Buffer::Builder initData();
  inline void adoptData(::capnp::Orphan< ::jay::Buffer>&& value);
  inline ::capnp::Orphan< ::jay::Buffer> disownData();

  inline  ::int64_t getMin();
  inline void setMin( ::int64_t value);

  inline  ::int64_t getMax();
  inline void setMax( ::int64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Column::Type::Int64::Pipeline {
public:
  typedef Int64 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::jay::Buffer::Pipeline getData();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Column::Type::Float32::Reader {
public:
  typedef Float32 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasData() const;
  inline  ::jay::Buffer::Reader getData() const;

  inline float getMin() const;

  inline float getMax() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Column::Type::Float32::Builder {
public:
  typedef Float32 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasData();
  inline  ::jay::Buffer::Builder getData();
  inline void setData( ::jay::Buffer::Reader value);
  inline  ::jay::Buffer::Builder initData();
  inline void adoptData(::capnp::Orphan< ::jay::Buffer>&& value);
  inline ::capnp::Orphan< ::jay::Buffer> disownData();

  inline float getMin();
  inline void setMin(float value);

  inline float getMax();
  inline void setMax(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Column::Type::Float32::Pipeline {
public:
  typedef Float32 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::jay::Buffer::Pipeline getData();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Column::Type::Float64::Reader {
public:
  typedef Float64 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasData() const;
  inline  ::jay::Buffer::Reader getData() const;

  inline double getMin() const;

  inline double getMax() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Column::Type::Float64::Builder {
public:
  typedef Float64 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasData();
  inline  ::jay::Buffer::Builder getData();
  inline void setData( ::jay::Buffer::Reader value);
  inline  ::jay::Buffer::Builder initData();
  inline void adoptData(::capnp::Orphan< ::jay::Buffer>&& value);
  inline ::capnp::Orphan< ::jay::Buffer> disownData();

  inline double getMin();
  inline void setMin(double value);

  inline double getMax();
  inline void setMax(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Column::Type::Float64::Pipeline {
public:
  typedef Float64 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::jay::Buffer::Pipeline getData();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Column::Type::Str32::Reader {
public:
  typedef Str32 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasOffsets() const;
  inline  ::jay::Buffer::Reader getOffsets() const;

  inline bool hasStrdata() const;
  inline  ::jay::Buffer::Reader getStrdata() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Column::Type::Str32::Builder {
public:
  typedef Str32 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasOffsets();
  inline  ::jay::Buffer::Builder getOffsets();
  inline void setOffsets( ::jay::Buffer::Reader value);
  inline  ::jay::Buffer::Builder initOffsets();
  inline void adoptOffsets(::capnp::Orphan< ::jay::Buffer>&& value);
  inline ::capnp::Orphan< ::jay::Buffer> disownOffsets();

  inline bool hasStrdata();
  inline  ::jay::Buffer::Builder getStrdata();
  inline void setStrdata( ::jay::Buffer::Reader value);
  inline  ::jay::Buffer::Builder initStrdata();
  inline void adoptStrdata(::capnp::Orphan< ::jay::Buffer>&& value);
  inline ::capnp::Orphan< ::jay::Buffer> disownStrdata();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Column::Type::Str32::Pipeline {
public:
  typedef Str32 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::jay::Buffer::Pipeline getOffsets();
  inline  ::jay::Buffer::Pipeline getStrdata();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Column::Type::Str64::Reader {
public:
  typedef Str64 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasOffsets() const;
  inline  ::jay::Buffer::Reader getOffsets() const;

  inline bool hasStrdata() const;
  inline  ::jay::Buffer::Reader getStrdata() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Column::Type::Str64::Builder {
public:
  typedef Str64 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasOffsets();
  inline  ::jay::Buffer::Builder getOffsets();
  inline void setOffsets( ::jay::Buffer::Reader value);
  inline  ::jay::Buffer::Builder initOffsets();
  inline void adoptOffsets(::capnp::Orphan< ::jay::Buffer>&& value);
  inline ::capnp::Orphan< ::jay::Buffer> disownOffsets();

  inline bool hasStrdata();
  inline  ::jay::Buffer::Builder getStrdata();
  inline void setStrdata( ::jay::Buffer::Reader value);
  inline  ::jay::Buffer::Builder initStrdata();
  inline void adoptStrdata(::capnp::Orphan< ::jay::Buffer>&& value);
  inline ::capnp::Orphan< ::jay::Buffer> disownStrdata();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Column::Type::Str64::Pipeline {
public:
  typedef Str64 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::jay::Buffer::Pipeline getOffsets();
  inline  ::jay::Buffer::Pipeline getStrdata();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Buffer::Reader {
public:
  typedef Buffer Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getOffset() const;

  inline  ::uint64_t getLength() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Buffer::Builder {
public:
  typedef Buffer Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getOffset();
  inline void setOffset( ::uint64_t value);

  inline  ::uint64_t getLength();
  inline void setLength( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Buffer::Pipeline {
public:
  typedef Buffer Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::int64_t Frame::Reader::getNrows() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Frame::Builder::getNrows() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Frame::Builder::setNrows( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Frame::Reader::getNcols() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Frame::Builder::getNcols() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Frame::Builder::setNcols( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Frame::Reader::hasColumns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Frame::Builder::hasColumns() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::jay::Column>::Reader Frame::Reader::getColumns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::jay::Column>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::jay::Column>::Builder Frame::Builder::getColumns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::jay::Column>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Frame::Builder::setColumns( ::capnp::List< ::jay::Column>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::jay::Column>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::jay::Column>::Builder Frame::Builder::initColumns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::jay::Column>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Frame::Builder::adoptColumns(
    ::capnp::Orphan< ::capnp::List< ::jay::Column>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::jay::Column>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::jay::Column>> Frame::Builder::disownColumns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::jay::Column>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Column::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Column::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Column::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Column::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Column::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Column::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Column::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Column::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Column::Reader::getNullcount() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Column::Builder::getNullcount() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Column::Builder::setNullcount( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Column::Reader::hasDescription() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Column::Builder::hasDescription() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Column::Reader::getDescription() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Column::Builder::getDescription() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Column::Builder::setDescription( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Column::Builder::initDescription(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Column::Builder::adoptDescription(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Column::Builder::disownDescription() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline typename Column::Type::Reader Column::Reader::getType() const {
  return typename Column::Type::Reader(_reader);
}
inline typename Column::Type::Builder Column::Builder::getType() {
  return typename Column::Type::Builder(_builder);
}
#if !CAPNP_LITE
inline typename Column::Type::Pipeline Column::Pipeline::getType() {
  return typename Column::Type::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename Column::Type::Builder Column::Builder::initType() {
  _builder.setDataField< ::uint16_t>(::capnp::bounded<4>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint16_t>(::capnp::bounded<5>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint32_t>(::capnp::bounded<3>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint64_t>(::capnp::bounded<2>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint64_t>(::capnp::bounded<3>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS).clear();
  _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS).clear();
  return typename Column::Type::Builder(_builder);
}
inline  ::jay::Column::Type::Which Column::Type::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline  ::jay::Column::Type::Which Column::Type::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline bool Column::Type::Reader::isMu() const {
  return which() == Column::Type::MU;
}
inline bool Column::Type::Builder::isMu() {
  return which() == Column::Type::MU;
}
inline  ::capnp::Void Column::Type::Reader::getMu() const {
  KJ_IREQUIRE((which() == Column::Type::MU),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Column::Type::Builder::getMu() {
  KJ_IREQUIRE((which() == Column::Type::MU),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Column::Type::Builder::setMu( ::capnp::Void value) {
  _builder.setDataField<Column::Type::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Column::Type::MU);
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Column::Type::Reader::isBool8() const {
  return which() == Column::Type::BOOL8;
}
inline bool Column::Type::Builder::isBool8() {
  return which() == Column::Type::BOOL8;
}
inline typename Column::Type::Bool8::Reader Column::Type::Reader::getBool8() const {
  KJ_IREQUIRE((which() == Column::Type::BOOL8),
              "Must check which() before get()ing a union member.");
  return typename Column::Type::Bool8::Reader(_reader);
}
inline typename Column::Type::Bool8::Builder Column::Type::Builder::getBool8() {
  KJ_IREQUIRE((which() == Column::Type::BOOL8),
              "Must check which() before get()ing a union member.");
  return typename Column::Type::Bool8::Builder(_builder);
}
inline typename Column::Type::Bool8::Builder Column::Type::Builder::initBool8() {
  _builder.setDataField<Column::Type::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Column::Type::BOOL8);
  _builder.setDataField< ::uint8_t>(::capnp::bounded<10>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint8_t>(::capnp::bounded<11>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS).clear();
  return typename Column::Type::Bool8::Builder(_builder);
}
inline bool Column::Type::Reader::isInt8() const {
  return which() == Column::Type::INT8;
}
inline bool Column::Type::Builder::isInt8() {
  return which() == Column::Type::INT8;
}
inline typename Column::Type::Int8::Reader Column::Type::Reader::getInt8() const {
  KJ_IREQUIRE((which() == Column::Type::INT8),
              "Must check which() before get()ing a union member.");
  return typename Column::Type::Int8::Reader(_reader);
}
inline typename Column::Type::Int8::Builder Column::Type::Builder::getInt8() {
  KJ_IREQUIRE((which() == Column::Type::INT8),
              "Must check which() before get()ing a union member.");
  return typename Column::Type::Int8::Builder(_builder);
}
inline typename Column::Type::Int8::Builder Column::Type::Builder::initInt8() {
  _builder.setDataField<Column::Type::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Column::Type::INT8);
  _builder.setDataField< ::uint8_t>(::capnp::bounded<10>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint8_t>(::capnp::bounded<11>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS).clear();
  return typename Column::Type::Int8::Builder(_builder);
}
inline bool Column::Type::Reader::isInt16() const {
  return which() == Column::Type::INT16;
}
inline bool Column::Type::Builder::isInt16() {
  return which() == Column::Type::INT16;
}
inline typename Column::Type::Int16::Reader Column::Type::Reader::getInt16() const {
  KJ_IREQUIRE((which() == Column::Type::INT16),
              "Must check which() before get()ing a union member.");
  return typename Column::Type::Int16::Reader(_reader);
}
inline typename Column::Type::Int16::Builder Column::Type::Builder::getInt16() {
  KJ_IREQUIRE((which() == Column::Type::INT16),
              "Must check which() before get()ing a union member.");
  return typename Column::Type::Int16::Builder(_builder);
}
inline typename Column::Type::Int16::Builder Column::Type::Builder::initInt16() {
  _builder.setDataField<Column::Type::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Column::Type::INT16);
  _builder.setDataField< ::uint16_t>(::capnp::bounded<5>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint16_t>(::capnp::bounded<6>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS).clear();
  return typename Column::Type::Int16::Builder(_builder);
}
inline bool Column::Type::Reader::isInt32() const {
  return which() == Column::Type::INT32;
}
inline bool Column::Type::Builder::isInt32() {
  return which() == Column::Type::INT32;
}
inline typename Column::Type::Int32::Reader Column::Type::Reader::getInt32() const {
  KJ_IREQUIRE((which() == Column::Type::INT32),
              "Must check which() before get()ing a union member.");
  return typename Column::Type::Int32::Reader(_reader);
}
inline typename Column::Type::Int32::Builder Column::Type::Builder::getInt32() {
  KJ_IREQUIRE((which() == Column::Type::INT32),
              "Must check which() before get()ing a union member.");
  return typename Column::Type::Int32::Builder(_builder);
}
inline typename Column::Type::Int32::Builder Column::Type::Builder::initInt32() {
  _builder.setDataField<Column::Type::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Column::Type::INT32);
  _builder.setDataField< ::uint32_t>(::capnp::bounded<3>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint32_t>(::capnp::bounded<4>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS).clear();
  return typename Column::Type::Int32::Builder(_builder);
}
inline bool Column::Type::Reader::isInt64() const {
  return which() == Column::Type::INT64;
}
inline bool Column::Type::Builder::isInt64() {
  return which() == Column::Type::INT64;
}
inline typename Column::Type::Int64::Reader Column::Type::Reader::getInt64() const {
  KJ_IREQUIRE((which() == Column::Type::INT64),
              "Must check which() before get()ing a union member.");
  return typename Column::Type::Int64::Reader(_reader);
}
inline typename Column::Type::Int64::Builder Column::Type::Builder::getInt64() {
  KJ_IREQUIRE((which() == Column::Type::INT64),
              "Must check which() before get()ing a union member.");
  return typename Column::Type::Int64::Builder(_builder);
}
inline typename Column::Type::Int64::Builder Column::Type::Builder::initInt64() {
  _builder.setDataField<Column::Type::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Column::Type::INT64);
  _builder.setDataField< ::uint64_t>(::capnp::bounded<2>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint64_t>(::capnp::bounded<3>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS).clear();
  return typename Column::Type::Int64::Builder(_builder);
}
inline bool Column::Type::Reader::isFloat32() const {
  return which() == Column::Type::FLOAT32;
}
inline bool Column::Type::Builder::isFloat32() {
  return which() == Column::Type::FLOAT32;
}
inline typename Column::Type::Float32::Reader Column::Type::Reader::getFloat32() const {
  KJ_IREQUIRE((which() == Column::Type::FLOAT32),
              "Must check which() before get()ing a union member.");
  return typename Column::Type::Float32::Reader(_reader);
}
inline typename Column::Type::Float32::Builder Column::Type::Builder::getFloat32() {
  KJ_IREQUIRE((which() == Column::Type::FLOAT32),
              "Must check which() before get()ing a union member.");
  return typename Column::Type::Float32::Builder(_builder);
}
inline typename Column::Type::Float32::Builder Column::Type::Builder::initFloat32() {
  _builder.setDataField<Column::Type::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Column::Type::FLOAT32);
  _builder.setDataField< ::uint32_t>(::capnp::bounded<3>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint32_t>(::capnp::bounded<4>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS).clear();
  return typename Column::Type::Float32::Builder(_builder);
}
inline bool Column::Type::Reader::isFloat64() const {
  return which() == Column::Type::FLOAT64;
}
inline bool Column::Type::Builder::isFloat64() {
  return which() == Column::Type::FLOAT64;
}
inline typename Column::Type::Float64::Reader Column::Type::Reader::getFloat64() const {
  KJ_IREQUIRE((which() == Column::Type::FLOAT64),
              "Must check which() before get()ing a union member.");
  return typename Column::Type::Float64::Reader(_reader);
}
inline typename Column::Type::Float64::Builder Column::Type::Builder::getFloat64() {
  KJ_IREQUIRE((which() == Column::Type::FLOAT64),
              "Must check which() before get()ing a union member.");
  return typename Column::Type::Float64::Builder(_builder);
}
inline typename Column::Type::Float64::Builder Column::Type::Builder::initFloat64() {
  _builder.setDataField<Column::Type::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Column::Type::FLOAT64);
  _builder.setDataField< ::uint64_t>(::capnp::bounded<2>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint64_t>(::capnp::bounded<3>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS).clear();
  return typename Column::Type::Float64::Builder(_builder);
}
inline bool Column::Type::Reader::isStr32() const {
  return which() == Column::Type::STR32;
}
inline bool Column::Type::Builder::isStr32() {
  return which() == Column::Type::STR32;
}
inline typename Column::Type::Str32::Reader Column::Type::Reader::getStr32() const {
  KJ_IREQUIRE((which() == Column::Type::STR32),
              "Must check which() before get()ing a union member.");
  return typename Column::Type::Str32::Reader(_reader);
}
inline typename Column::Type::Str32::Builder Column::Type::Builder::getStr32() {
  KJ_IREQUIRE((which() == Column::Type::STR32),
              "Must check which() before get()ing a union member.");
  return typename Column::Type::Str32::Builder(_builder);
}
inline typename Column::Type::Str32::Builder Column::Type::Builder::initStr32() {
  _builder.setDataField<Column::Type::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Column::Type::STR32);
  _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS).clear();
  _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS).clear();
  return typename Column::Type::Str32::Builder(_builder);
}
inline bool Column::Type::Reader::isStr64() const {
  return which() == Column::Type::STR64;
}
inline bool Column::Type::Builder::isStr64() {
  return which() == Column::Type::STR64;
}
inline typename Column::Type::Str64::Reader Column::Type::Reader::getStr64() const {
  KJ_IREQUIRE((which() == Column::Type::STR64),
              "Must check which() before get()ing a union member.");
  return typename Column::Type::Str64::Reader(_reader);
}
inline typename Column::Type::Str64::Builder Column::Type::Builder::getStr64() {
  KJ_IREQUIRE((which() == Column::Type::STR64),
              "Must check which() before get()ing a union member.");
  return typename Column::Type::Str64::Builder(_builder);
}
inline typename Column::Type::Str64::Builder Column::Type::Builder::initStr64() {
  _builder.setDataField<Column::Type::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Column::Type::STR64);
  _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS).clear();
  _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS).clear();
  return typename Column::Type::Str64::Builder(_builder);
}
inline bool Column::Type::Bool8::Reader::hasData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Column::Type::Bool8::Builder::hasData() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::jay::Buffer::Reader Column::Type::Bool8::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::jay::Buffer>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::jay::Buffer::Builder Column::Type::Bool8::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::jay::Buffer>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::jay::Buffer::Pipeline Column::Type::Bool8::Pipeline::getData() {
  return  ::jay::Buffer::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Column::Type::Bool8::Builder::setData( ::jay::Buffer::Reader value) {
  ::capnp::_::PointerHelpers< ::jay::Buffer>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::jay::Buffer::Builder Column::Type::Bool8::Builder::initData() {
  return ::capnp::_::PointerHelpers< ::jay::Buffer>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Column::Type::Bool8::Builder::adoptData(
    ::capnp::Orphan< ::jay::Buffer>&& value) {
  ::capnp::_::PointerHelpers< ::jay::Buffer>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::jay::Buffer> Column::Type::Bool8::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::jay::Buffer>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::int8_t Column::Type::Bool8::Reader::getMin() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, -128);
}

inline  ::int8_t Column::Type::Bool8::Builder::getMin() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, -128);
}
inline void Column::Type::Bool8::Builder::setMin( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value, -128);
}

inline  ::int8_t Column::Type::Bool8::Reader::getMax() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, -128);
}

inline  ::int8_t Column::Type::Bool8::Builder::getMax() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, -128);
}
inline void Column::Type::Bool8::Builder::setMax( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value, -128);
}

inline bool Column::Type::Int8::Reader::hasData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Column::Type::Int8::Builder::hasData() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::jay::Buffer::Reader Column::Type::Int8::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::jay::Buffer>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::jay::Buffer::Builder Column::Type::Int8::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::jay::Buffer>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::jay::Buffer::Pipeline Column::Type::Int8::Pipeline::getData() {
  return  ::jay::Buffer::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Column::Type::Int8::Builder::setData( ::jay::Buffer::Reader value) {
  ::capnp::_::PointerHelpers< ::jay::Buffer>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::jay::Buffer::Builder Column::Type::Int8::Builder::initData() {
  return ::capnp::_::PointerHelpers< ::jay::Buffer>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Column::Type::Int8::Builder::adoptData(
    ::capnp::Orphan< ::jay::Buffer>&& value) {
  ::capnp::_::PointerHelpers< ::jay::Buffer>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::jay::Buffer> Column::Type::Int8::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::jay::Buffer>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::int8_t Column::Type::Int8::Reader::getMin() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, -128);
}

inline  ::int8_t Column::Type::Int8::Builder::getMin() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, -128);
}
inline void Column::Type::Int8::Builder::setMin( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value, -128);
}

inline  ::int8_t Column::Type::Int8::Reader::getMax() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, -128);
}

inline  ::int8_t Column::Type::Int8::Builder::getMax() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, -128);
}
inline void Column::Type::Int8::Builder::setMax( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value, -128);
}

inline bool Column::Type::Int16::Reader::hasData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Column::Type::Int16::Builder::hasData() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::jay::Buffer::Reader Column::Type::Int16::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::jay::Buffer>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::jay::Buffer::Builder Column::Type::Int16::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::jay::Buffer>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::jay::Buffer::Pipeline Column::Type::Int16::Pipeline::getData() {
  return  ::jay::Buffer::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Column::Type::Int16::Builder::setData( ::jay::Buffer::Reader value) {
  ::capnp::_::PointerHelpers< ::jay::Buffer>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::jay::Buffer::Builder Column::Type::Int16::Builder::initData() {
  return ::capnp::_::PointerHelpers< ::jay::Buffer>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Column::Type::Int16::Builder::adoptData(
    ::capnp::Orphan< ::jay::Buffer>&& value) {
  ::capnp::_::PointerHelpers< ::jay::Buffer>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::jay::Buffer> Column::Type::Int16::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::jay::Buffer>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::int16_t Column::Type::Int16::Reader::getMin() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, -32768);
}

inline  ::int16_t Column::Type::Int16::Builder::getMin() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, -32768);
}
inline void Column::Type::Int16::Builder::setMin( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value, -32768);
}

inline  ::int16_t Column::Type::Int16::Reader::getMax() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, -32768);
}

inline  ::int16_t Column::Type::Int16::Builder::getMax() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, -32768);
}
inline void Column::Type::Int16::Builder::setMax( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value, -32768);
}

inline bool Column::Type::Int32::Reader::hasData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Column::Type::Int32::Builder::hasData() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::jay::Buffer::Reader Column::Type::Int32::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::jay::Buffer>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::jay::Buffer::Builder Column::Type::Int32::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::jay::Buffer>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::jay::Buffer::Pipeline Column::Type::Int32::Pipeline::getData() {
  return  ::jay::Buffer::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Column::Type::Int32::Builder::setData( ::jay::Buffer::Reader value) {
  ::capnp::_::PointerHelpers< ::jay::Buffer>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::jay::Buffer::Builder Column::Type::Int32::Builder::initData() {
  return ::capnp::_::PointerHelpers< ::jay::Buffer>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Column::Type::Int32::Builder::adoptData(
    ::capnp::Orphan< ::jay::Buffer>&& value) {
  ::capnp::_::PointerHelpers< ::jay::Buffer>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::jay::Buffer> Column::Type::Int32::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::jay::Buffer>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::int32_t Column::Type::Int32::Reader::getMin() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, -2147483648);
}

inline  ::int32_t Column::Type::Int32::Builder::getMin() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, -2147483648);
}
inline void Column::Type::Int32::Builder::setMin( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value, -2147483648);
}

inline  ::int32_t Column::Type::Int32::Reader::getMax() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, -2147483648);
}

inline  ::int32_t Column::Type::Int32::Builder::getMax() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, -2147483648);
}
inline void Column::Type::Int32::Builder::setMax( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value, -2147483648);
}

inline bool Column::Type::Int64::Reader::hasData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Column::Type::Int64::Builder::hasData() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::jay::Buffer::Reader Column::Type::Int64::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::jay::Buffer>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::jay::Buffer::Builder Column::Type::Int64::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::jay::Buffer>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::jay::Buffer::Pipeline Column::Type::Int64::Pipeline::getData() {
  return  ::jay::Buffer::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Column::Type::Int64::Builder::setData( ::jay::Buffer::Reader value) {
  ::capnp::_::PointerHelpers< ::jay::Buffer>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::jay::Buffer::Builder Column::Type::Int64::Builder::initData() {
  return ::capnp::_::PointerHelpers< ::jay::Buffer>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Column::Type::Int64::Builder::adoptData(
    ::capnp::Orphan< ::jay::Buffer>&& value) {
  ::capnp::_::PointerHelpers< ::jay::Buffer>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::jay::Buffer> Column::Type::Int64::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::jay::Buffer>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::int64_t Column::Type::Int64::Reader::getMin() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, INT64_MIN);
}

inline  ::int64_t Column::Type::Int64::Builder::getMin() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, INT64_MIN);
}
inline void Column::Type::Int64::Builder::setMin( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value, INT64_MIN);
}

inline  ::int64_t Column::Type::Int64::Reader::getMax() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, INT64_MIN);
}

inline  ::int64_t Column::Type::Int64::Builder::getMax() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, INT64_MIN);
}
inline void Column::Type::Int64::Builder::setMax( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value, INT64_MIN);
}

inline bool Column::Type::Float32::Reader::hasData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Column::Type::Float32::Builder::hasData() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::jay::Buffer::Reader Column::Type::Float32::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::jay::Buffer>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::jay::Buffer::Builder Column::Type::Float32::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::jay::Buffer>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::jay::Buffer::Pipeline Column::Type::Float32::Pipeline::getData() {
  return  ::jay::Buffer::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Column::Type::Float32::Builder::setData( ::jay::Buffer::Reader value) {
  ::capnp::_::PointerHelpers< ::jay::Buffer>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::jay::Buffer::Builder Column::Type::Float32::Builder::initData() {
  return ::capnp::_::PointerHelpers< ::jay::Buffer>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Column::Type::Float32::Builder::adoptData(
    ::capnp::Orphan< ::jay::Buffer>&& value) {
  ::capnp::_::PointerHelpers< ::jay::Buffer>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::jay::Buffer> Column::Type::Float32::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::jay::Buffer>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline float Column::Type::Float32::Reader::getMin() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, 2143289344u);
}

inline float Column::Type::Float32::Builder::getMin() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, 2143289344u);
}
inline void Column::Type::Float32::Builder::setMin(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value, 2143289344u);
}

inline float Column::Type::Float32::Reader::getMax() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, 2143289344u);
}

inline float Column::Type::Float32::Builder::getMax() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, 2143289344u);
}
inline void Column::Type::Float32::Builder::setMax(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value, 2143289344u);
}

inline bool Column::Type::Float64::Reader::hasData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Column::Type::Float64::Builder::hasData() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::jay::Buffer::Reader Column::Type::Float64::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::jay::Buffer>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::jay::Buffer::Builder Column::Type::Float64::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::jay::Buffer>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::jay::Buffer::Pipeline Column::Type::Float64::Pipeline::getData() {
  return  ::jay::Buffer::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Column::Type::Float64::Builder::setData( ::jay::Buffer::Reader value) {
  ::capnp::_::PointerHelpers< ::jay::Buffer>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::jay::Buffer::Builder Column::Type::Float64::Builder::initData() {
  return ::capnp::_::PointerHelpers< ::jay::Buffer>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Column::Type::Float64::Builder::adoptData(
    ::capnp::Orphan< ::jay::Buffer>&& value) {
  ::capnp::_::PointerHelpers< ::jay::Buffer>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::jay::Buffer> Column::Type::Float64::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::jay::Buffer>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline double Column::Type::Float64::Reader::getMin() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, 9221120237041090560ull);
}

inline double Column::Type::Float64::Builder::getMin() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, 9221120237041090560ull);
}
inline void Column::Type::Float64::Builder::setMin(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value, 9221120237041090560ull);
}

inline double Column::Type::Float64::Reader::getMax() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, 9221120237041090560ull);
}

inline double Column::Type::Float64::Builder::getMax() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, 9221120237041090560ull);
}
inline void Column::Type::Float64::Builder::setMax(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value, 9221120237041090560ull);
}

inline bool Column::Type::Str32::Reader::hasOffsets() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Column::Type::Str32::Builder::hasOffsets() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::jay::Buffer::Reader Column::Type::Str32::Reader::getOffsets() const {
  return ::capnp::_::PointerHelpers< ::jay::Buffer>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::jay::Buffer::Builder Column::Type::Str32::Builder::getOffsets() {
  return ::capnp::_::PointerHelpers< ::jay::Buffer>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::jay::Buffer::Pipeline Column::Type::Str32::Pipeline::getOffsets() {
  return  ::jay::Buffer::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Column::Type::Str32::Builder::setOffsets( ::jay::Buffer::Reader value) {
  ::capnp::_::PointerHelpers< ::jay::Buffer>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::jay::Buffer::Builder Column::Type::Str32::Builder::initOffsets() {
  return ::capnp::_::PointerHelpers< ::jay::Buffer>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Column::Type::Str32::Builder::adoptOffsets(
    ::capnp::Orphan< ::jay::Buffer>&& value) {
  ::capnp::_::PointerHelpers< ::jay::Buffer>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::jay::Buffer> Column::Type::Str32::Builder::disownOffsets() {
  return ::capnp::_::PointerHelpers< ::jay::Buffer>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Column::Type::Str32::Reader::hasStrdata() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Column::Type::Str32::Builder::hasStrdata() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::jay::Buffer::Reader Column::Type::Str32::Reader::getStrdata() const {
  return ::capnp::_::PointerHelpers< ::jay::Buffer>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::jay::Buffer::Builder Column::Type::Str32::Builder::getStrdata() {
  return ::capnp::_::PointerHelpers< ::jay::Buffer>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::jay::Buffer::Pipeline Column::Type::Str32::Pipeline::getStrdata() {
  return  ::jay::Buffer::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Column::Type::Str32::Builder::setStrdata( ::jay::Buffer::Reader value) {
  ::capnp::_::PointerHelpers< ::jay::Buffer>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::jay::Buffer::Builder Column::Type::Str32::Builder::initStrdata() {
  return ::capnp::_::PointerHelpers< ::jay::Buffer>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Column::Type::Str32::Builder::adoptStrdata(
    ::capnp::Orphan< ::jay::Buffer>&& value) {
  ::capnp::_::PointerHelpers< ::jay::Buffer>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::jay::Buffer> Column::Type::Str32::Builder::disownStrdata() {
  return ::capnp::_::PointerHelpers< ::jay::Buffer>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Column::Type::Str64::Reader::hasOffsets() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Column::Type::Str64::Builder::hasOffsets() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::jay::Buffer::Reader Column::Type::Str64::Reader::getOffsets() const {
  return ::capnp::_::PointerHelpers< ::jay::Buffer>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::jay::Buffer::Builder Column::Type::Str64::Builder::getOffsets() {
  return ::capnp::_::PointerHelpers< ::jay::Buffer>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::jay::Buffer::Pipeline Column::Type::Str64::Pipeline::getOffsets() {
  return  ::jay::Buffer::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Column::Type::Str64::Builder::setOffsets( ::jay::Buffer::Reader value) {
  ::capnp::_::PointerHelpers< ::jay::Buffer>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::jay::Buffer::Builder Column::Type::Str64::Builder::initOffsets() {
  return ::capnp::_::PointerHelpers< ::jay::Buffer>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Column::Type::Str64::Builder::adoptOffsets(
    ::capnp::Orphan< ::jay::Buffer>&& value) {
  ::capnp::_::PointerHelpers< ::jay::Buffer>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::jay::Buffer> Column::Type::Str64::Builder::disownOffsets() {
  return ::capnp::_::PointerHelpers< ::jay::Buffer>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Column::Type::Str64::Reader::hasStrdata() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Column::Type::Str64::Builder::hasStrdata() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::jay::Buffer::Reader Column::Type::Str64::Reader::getStrdata() const {
  return ::capnp::_::PointerHelpers< ::jay::Buffer>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::jay::Buffer::Builder Column::Type::Str64::Builder::getStrdata() {
  return ::capnp::_::PointerHelpers< ::jay::Buffer>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::jay::Buffer::Pipeline Column::Type::Str64::Pipeline::getStrdata() {
  return  ::jay::Buffer::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Column::Type::Str64::Builder::setStrdata( ::jay::Buffer::Reader value) {
  ::capnp::_::PointerHelpers< ::jay::Buffer>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::jay::Buffer::Builder Column::Type::Str64::Builder::initStrdata() {
  return ::capnp::_::PointerHelpers< ::jay::Buffer>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Column::Type::Str64::Builder::adoptStrdata(
    ::capnp::Orphan< ::jay::Buffer>&& value) {
  ::capnp::_::PointerHelpers< ::jay::Buffer>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::jay::Buffer> Column::Type::Str64::Builder::disownStrdata() {
  return ::capnp::_::PointerHelpers< ::jay::Buffer>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::uint64_t Buffer::Reader::getOffset() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Buffer::Builder::getOffset() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Buffer::Builder::setOffset( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Buffer::Reader::getLength() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Buffer::Builder::getLength() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Buffer::Builder::setLength( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

}  // namespace

#endif  // CAPNP_INCLUDED_9bf7c057bfbac576_
