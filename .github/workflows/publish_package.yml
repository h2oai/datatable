name: Publish datatable to PyPI

on:
    release:
        types: [published]
#on:
#  - push
#  - pull_request

jobs:
  release:
    name: Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python: ["3.8", "3.9", "3.10", "3.11"]
    steps:
      - name: Check Path for MSVC
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            echo "linux"
          elif [ "$RUNNER_OS" == "macOS" ]; then
            echo "mac"
          elif [ "$RUNNER_OS" == "Windows" ]; then
            vswhere.exe -latest -property installationPath &&
            dir 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0'
            python -c 'import sys; print(sys.base_prefix);'
            dir 'C:\hostedtoolcache\windows\Python\3.8.10\x64'
          else
            echo "$RUNNER_OS not supported";
            exit 1
          fi
        shell: bash

      - name: Check out the repository
        uses: actions/checkout@v3.1.0
        with:
          fetch-depth: 2
          remote: true
          submodules: recursive

#       Used to host cibuildwheel
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}

      - name: Install Twine
        run: |
          python -m pip install twine

      - name: Build source
        run: |
          make sdist
        env:
          DT_RELEASE: true

      - name: Build wheel
        run: |
          make wheel
        env:
          DT_MSVC_PATH: C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\
          DT_RELEASE: true

      - name: Auditwheel for manylinux
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            pip install auditwheel
            auditwheel repair $(ls dist/*.whl) --plat manylinux_2_35_x86_64
            rm dist/*.whl
            cp -r dist/*.tar.gz wheelhouse
          else
            mv dist wheelhouse
          fi
          ls wheelhouse
        shell: bash

#       Build and upload to PyPI
      - name: "Builds and uploads to PyPI"
        run: |
            python -m twine upload wheelhouse/* --skip-existing --verbose
        env:
            TWINE_USERNAME: __token__
            TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

      - name: Upload
        run: |
            python -m twine upload wheelhouse/* --skip-existing --verbose
        env:
            TWINE_USERNAME: __token__
            TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*